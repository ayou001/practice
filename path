
#include <ros/ros.h>
#include <nav_msgs/OccupancyGrid.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>

const int Start_x = 80;
const int Start_y = 80;
const int end_x = 1130;
const int end_y = 450;

// 定义节点结构体
struct Node {
    int x;
    int y;
    float g;
    float f;
    Node* parent;

    bool operator==(const Node& other) const {
        return x == other.x && y == other.y;
    }
};

// 定义全局变量
nav_msgs::OccupancyGrid::ConstPtr map_msg;
ros::Publisher path_pub;

// 计算两个节点之间的曼哈顿距离
float manhattan_distance(int x1, int y1, int x2, int y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}

// 判断一个节点是否在地图内且可行
bool is_valid_node(int x, int y) {
    if (x < 0 || x >= map_msg->info.width || y < 0 || y >= map_msg->info.height) {
        return false;
    }

    int index = y * map_msg->info.width + x;
    if (map_msg->data[index] > 50) { 
        return false;
    }

    return true;
}

bool node_in_open_list(const Node* node, const std::vector<Node*>& open_list) {
    for (const Node* n : open_list) {
        if (node->x == n->x && node->y == n->y) {
            return true;
        }
    }
    return false;
}

// A*算法寻找最优路径并返回其节点指针，如果没有可行路径则返回空指针
Node* find_path() {
    // 创建起始节点和结束节点
    Node* start_node = new Node{Start_x, Start_y, 0.0f, 0.0f, nullptr};

    Node* end_node = new Node{end_x, end_y, 0.0f, 0.0f, nullptr};
    int ind=Start_y*map_msg->info.width+Start_x;
    printf("data: %d",map_msg->data[ind]);
    ros::Duration(10.0).sleep();
    // 创建开放列表和关闭列表
    std::vector<Node*> open_list(360000);
    std::vector<Node*> close_list(36000);

    // 初始化起始节点的 f 值，并添加到开放列表中
    start_node->f = manhattan_distance(start_node->x, start_node->y, end_node->x, end_node->y);

    open_list.push_back(start_node);
    int a=1,b=1,c=1,d=1;
    while (!open_list.empty()&&ros::ok()) {
        // 从开放列表中选取 f 值最小的节点，并将其加入到关闭列表中
        
        Node* current_node = open_list.front();
      
        for (const auto node : open_list) {
            if (node->f < current_node->f) {
                current_node = node;
                printf("d:%d\n",d);
                d++;
            }
        }
        printf("x:%d y:%d g:%f f:%f\n",current_node->x,current_node->y,current_node->g,current_node->f);
        open_list.erase(std::remove_if(open_list.begin(), open_list.end(),[&](const auto node){return *node==*current_node;} ),open_list.end());
       // open_list.erase(std::find(open_list.begin(), open_list.end(), current_node));
        
      /* auto it=std::find(open_list.begin(), open_list.end(), &current_node);
        if(it!=open_list.end()){
            open_list.erase(it);
            printf("e:%d\n",e);
            e++;
        }
        */
        close_list.push_back(current_node);

        // 判断当前节点是否为目标节点
        if (*current_node == *end_node) {
            return current_node;
        }

        // 在当前节点周围搜索可行节点
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) {
                    continue;
                }

                int x = current_node->x + i;
                int y = current_node->y + j;

                // 判断该节点是否在地图内且可行
                if (!is_valid_node(x, y)) {
                    continue;
                }

                // 判断该节点是否在关闭列表中

                Node temp_node{x, y, 0.0f, 0.0f, nullptr};
                bool in_close_list = false;
            
                for(const auto node:close_list){
                    if(*node==temp_node){
                        in_close_list=true;
                        break;
                    }
                    
                }
               
             //   auto it = std::find(close_list.begin(), close_list.end(), &temp_node);
                // if (it != close_list.end()) {
                //     printf("c:%d\n",c);
                //     c++;
                //     continue;
                // }
                if(in_close_list){
                    printf("c:%d\n",c);
                    c++;
                    continue;
                }
                // 计算该节点的 g 值
                
                float g = current_node->g + manhattan_distance(current_node->x, current_node->y, x, y);
                float h = manhattan_distance(x, y, end_node->x, end_node->y);
                //std::cout<<"x:"<<current_node->x<<"  y:"<<current_node->y<<"  g"<<current_node->g<<std::endl;
                // 如果该节点不在开放列表中，则添加进去
        
                bool in_open_list=false;
                for(auto node:open_list){
                    if(*node==temp_node){
                        in_open_list=true;
                        break;
                    }
                }

                if (!in_open_list) {
                   
                        Node* new_node = new Node{x, y, g, 0.0f, current_node};
                        printf("a:%d\n",a);
                        a++; 
                        new_node->f = g + h;
                        open_list.push_back(new_node);

                    

                } else {
                    // 如果该节点已经在开放列表中且新的 f 值更优，则更新其 g 和 f 值，并修改其父节点
                    printf("b:%d\n",b);
                    b++; 
                    for(const auto existing_node:open_list){
                        if(*existing_node==temp_node){                  
                            if (g + h < existing_node->f) {
                                printf("b:%d\n",b);
                                b++; 
                                existing_node->g = g;
                                existing_node->f = g + h;
                                existing_node->parent = current_node;
                            }
                            break;
                        }
                    }
                }
            }
        }
    }

    // 如果没有可行路径，则返回空指针
    return nullptr;
}

// 发布路径消息
void publish_path(const Node* end_node) {
    // 创建路径消息
    nav_msgs::Path path_msg;
    path_msg.header.stamp = ros::Time::now();
    path_msg.header.frame_id = map_msg->header.frame_id;

    // 从目标节点回溯到起始节点，构建路径消息
    const Node* current_node = end_node;
    while (current_node) {
        float x = current_node->x * map_msg->info.resolution + map_msg->info.resolution / 2;
        float y = current_node->y * map_msg->info.resolution + map_msg->info.resolution / 2;

        geometry_msgs::PoseStamped pose;
        pose.pose.position.x = x;
        pose.pose.position.y = y;
        pose.pose.position.z = 0.0f;
        path_msg.poses.push_back(pose);

        current_node = current_node->parent;
    }

    // 反转路径消息，使其从起始节点到目标节点
    std::reverse(path_msg.poses.begin(), path_msg.poses.end());

    // 发布路径消息
    path_pub.publish(path_msg);
}

// 地图回调函数
void map_callback(const nav_msgs::OccupancyGrid::ConstPtr& msg) {
    // 保存地图消息
    map_msg = msg;


        // 寻找最优路径
        Node* end_node = find_path();

        if (end_node) {
            // 发布路径消息
            publish_path(end_node);

            // 释放节点内存
            while (end_node) {
                Node* temp_node = end_node->parent;
                delete end_node;
                end_node = temp_node;
            }
        } else {
            ROS_WARN("Failed to find path.");
        }

   
    
}

// 主函数
int main(int argc, char** argv) {
    // 初始化ROS节点
    ros::init(argc, argv, "path_planning_node");
    ros::NodeHandle nh;

    // 创建地图和路径发布器
    ros::Subscriber map_sub = nh.subscribe("visualized_map", 1, &map_callback);
    path_pub = nh.advertise<nav_msgs::Path>("path", 1);

    while (ros::ok()){
        ros::spinOnce();
    }
    return 0;
}





// 发布路径消息
void publish_path(const Node* end_node) {
    // 创建路径消息
    nav_msgs::Path path_msg;
    path_msg.header.stamp = ros::Time::now();
    path_msg.header.frame_id = map_msg->header.frame_id;

    // 从目标节点回溯到起始节点，构建路径消息
    const Node* current_node = end_node;
    while (current_node) {
        float x = current_node->x * map_msg->info.resolution + map_msg->info.resolution / 2;
        float y = current_node->y * map_msg->info.resolution + map_msg->info.resolution / 2;

        geometry_msgs::PoseStamped pose;
        pose.pose.position.x = x;
        pose.pose.position.y = y;
        pose.pose.position.z = 0.0f;
        path_msg.poses.push_back(pose);

        current_node = current_node->parent;
    }

    // 反转路径消息，使其从起始节点到目标节点
    std::reverse(path_msg.poses.begin(), path_msg.poses.end());

    // 发布路径消息
    path_pub.publish(path_msg);
}



// 地图回调函数
void map_callback(const nav_msgs::OccupancyGrid::ConstPtr& msg) {
    // 保存地图消息
    map_msg = msg;

    while (ros::ok()) {


        // 寻找最优路径
        Node* end_node = find_path();

        if (end_node) {
            // 发布路径消息
            publish_path(end_node);

            // 释放节点内存
            while (end_node) {
                Node* temp_node = end_node->parent;
                delete end_node;
                end_node = temp_node;
            }
        } else {
            ROS_WARN("Failed to find path.");
        }

        break;
    }
}

// 主函数
int main(int argc, char** argv) {
    // 初始化ROS节点
    ros::init(argc, argv, "path_planning_node");
    ros::NodeHandle nh;

    // 创建地图和路径发布器
    ros::Subscriber map_sub = nh.subscribe("visualized_map", 1, &map_callback);
    path_pub = nh.advertise<nav_msgs::Path>("path", 1);



    while(ros::ok())
    {      
        ros::spinOnce();
    
    }
    return 0;
}
*/
// 如果该节点已经在开放列表中且新的 f 值更优，则更新其 g 和 f 值，并修改其父节点
if (node_in_open_list(&temp_node, open_list)) {
    Node* existing_node = *std::find_if(open_list.begin(), open_list.end(), [&](Node* n) {
        return temp_node == *n;
    });
    if (g + manhattan_distance(x, y, end_node->x, end_node->y) < existing_node->f) {
        existing_node->g = g;
        existing_node->f = g + manhattan_distance(x, y, end_node->x, end_node->y);
        existing_node->parent = current_node;
    }
} else { // 如果该节点不在开放列表中，则添加进去
    Node* new_node = new Node{x, y, g, 0.0f, current_node};
    new_node->f = g + manhattan_distance(x, y, end_node->x, end_node->y);
    open_list.push_back(new_node);
}

#include <ros/ros.h>
#include <nav_msgs/OccupancyGrid.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>

const int Start_x = 80;
const int Start_y = 80;
const int end_x = 1130;
const int end_y = 450;

// 定义节点结构体
struct Node {
    int x;
    int y;
    float g;
    float f;
    Node* parent;

    bool operator==(const Node& other) const {
        return x == other.x && y == other.y;
    }
};

// 定义全局变量
nav_msgs::OccupancyGrid::ConstPtr map_msg;
ros::Publisher path_pub;

// 计算两个节点之间的曼哈顿距离
float manhattan_distance(int x1, int y1, int x2, int y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}

// 判断一个节点是否在地图内且可行
bool is_valid_node(int x, int y) {
    if (x < 0 || x >= map_msg->info.width || y < 0 || y >= map_msg->info.height) {
        return false;
    }

    int index = y * map_msg->info.width + x;
    if (map_msg->data[index] == 100) { 
        return false;
    }

    return true;
}

// A*算法寻找最优路径并返回其节点指针，如果没有可行路径则返回空指针
Node* find_path() {
    // 创建起始节点和结束节点
    Node* start_node = new Node{Start_x, Start_y, 0.0f, 0.0f, nullptr};

    Node* end_node = new Node{end_x, end_y, 0.0f, 0.0f, nullptr};
    int ind=Start_y*map_msg->info.width+Start_x;
    std::cout<<"start_x: "<<Start_x<<" start_y: "<<Start_y<<" ind: "<<ind<<" start_data :"<<map_msg->data[ind]<<std::endl;

    // 创建开放列表和关闭列表
    std::vector<Node*> open_list;
    std::vector<Node*> close_list;

    // 初始化起始节点的 f 值，并添加到开放列表中
    start_node->f = manhattan_distance(start_node->x, start_node->y, end_node->x, end_node->y);

    open_list.push_back(start_node);

    while (!open_list.empty()) {
        // 从开放列表中选取 f 值最小的节点，并将其加入到关闭列表中
        Node* current_node = open_list.front();
        for (auto node : open_list) {
            if (node->f < current_node->f) {
                current_node = node;
            }
        }
        open_list.erase(std::find(open_list.begin(), open_list.end(), current_node));
        close_list.push_back(current_node);

        // 判断当前节点是否为目标节点
        if (*current_node == *end_node) {
            return current_node;
        }

        // 在当前节点周围搜索可行节点
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) {
                    continue;
                }

                int x = current_node->x + i;
                int y = current_node->y + j;

                // 判断该节点是否在地图内且可行
                if (!is_valid_node(x, y)) {
                    continue;
                }

                // 判断该节点是否在关闭列表中
                Node temp_node{x, y, 0.0f, 0.0f, nullptr};
                auto it = std::find(close_list.begin(), close_list.end(), &temp_node);
                if (it != close_list.end()) {
                    continue;
                }

                // 计算该节点的 g 值
                float g = current_node->g + manhattan_distance(current_node->x, current_node->y, x, y);
                std::cout<<"x:"<<current_node->x<<"  y:"<<current_node->y<<"  g"<<current_node->g<<std::endl;
                // 如果该节点不在开放列表中，则添加进去
                it = std::find(open_list.begin(), open_list.end(), &temp_node);
                if (it == open_list.end()) {
                    Node* new_node = new Node{x, y, g, 0.0f, current_node};
                    printf("x:%d y:%d\n",new_node->x,new_node->y);
                    new_node->f = g + manhattan_distance(x, y, end_node->x, end_node->y);
                    open_list.push_back(new_node);
                } else {
                    // 如果该节点已经在开放列表中且新的 f 值更优，则更新其 g 和 f 值，并修改其父节点
                    Node* existing_node = *it;
                    if (g + manhattan_distance(x, y, end_node->x, end_node->y) < existing_node->f) {
                        existing_node->g = g;
                        existing_node->f = g + manhattan_distance(x, y, end_node->x, end_node->y);
                        existing_node->parent = current_node;
                    }
                }
            }
        }
    }

    // 如果没有可行路径，则返回空指针
    return nullptr;
}

// 发布路径消息
void publish_path(const Node* end_node) {
    // 创建路径消息
    nav_msgs::Path path_msg;
    path_msg.header.stamp = ros::Time::now();
    path_msg.header.frame_id = map_msg->header.frame_id;

    // 从目标节点回溯到起始节点，构建路径消息
    const Node* current_node = end_node;
    while (current_node) {
        float x = current_node->x * map_msg->info.resolution + map_msg->info.resolution / 2;
        float y = current_node->y * map_msg->info.resolution + map_msg->info.resolution / 2;

        geometry_msgs::PoseStamped pose;
        pose.pose.position.x = x;
        pose.pose.position.y = y;
        pose.pose.position.z = 0.0f;
        path_msg.poses.push_back(pose);

        current_node = current_node->parent;
    }

    // 反转路径消息，使其从起始节点到目标节点
    std::reverse(path_msg.poses.begin(), path_msg.poses.end());

    // 发布路径消息
    path_pub.publish(path_msg);
}

// 地图回调函数
void map_callback(const nav_msgs::OccupancyGrid::ConstPtr& msg) {
    // 保存地图消息
    map_msg = msg;


        // 寻找最优路径
        Node* end_node = find_path();

        if (end_node) {
            // 发布路径消息
            publish_path(end_node);

            // 释放节点内存
            while (end_node) {
                Node* temp_node = end_node->parent;
                delete end_node;
                end_node = temp_node;
            }
        } else {
            ROS_WARN("Failed to find path.");
        }

   
    
}

// 主函数
int main(int argc, char** argv) {
    // 初始化ROS节点
    ros::init(argc, argv, "path_planning_node");
    ros::NodeHandle nh;

    // 创建地图和路径发布器
    ros::Subscriber map_sub = nh.subscribe("visualized_map", 1, &map_callback);
    path_pub = nh.advertise<nav_msgs::Path>("path", 1);

    while (ros::ok()){
        ros::spin();
    }
    return 0;
}
