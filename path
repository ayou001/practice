#include <ros/ros.h>
#include <nav_msgs/OccupancyGrid.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>
#include <tf2/LinearMath/Quaternion.h>
#include <tf2_ros/transform_listener.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <queue>
#include <unordered_map>
#include <cmath>
#include <visualization_msgs/Marker.h>

// 定义节点数据结构和比较器，参考上面的代码

// 声明全局变量，参考上面的代码

// 订阅地图数据，并回调计算路径
void map_callback(const nav_msgs::OccupancyGrid::ConstPtr& msg) {
    // 把全局变量 map_msg 更新为最新的地图信息
    map_msg = msg;

    // 计算路径
    Node* end_node = find_path();
    if (end_node) {
        nav_msgs::Path path = convert_path(end_node);
        path_pub.publish(path);

        // 创建可视化消息，并发布到 rviz 中
        visualization_msgs::Marker marker;
        marker.header.frame_id = "map";
        marker.header.stamp = ros::Time::now();
        marker.id = 0;
        marker.type = visualization_msgs::Marker::LINE_STRIP;
        marker.action = visualization_msgs::Marker::ADD;
        marker.color.r = 1.0;
        marker.color.g = 0.0;
        marker.color.b = 0.0;
        marker.color.a = 1.0;
        marker.scale.x = map_msg->info.resolution;
        marker.scale.y = map_msg->info.resolution;
        marker.scale.z = map_msg->info.resolution;

        for (size_t i = 0; i < path.poses.size(); ++i) {
            geometry_msgs::Point point;
            point.x = path.poses[i].pose.position.x;
            point.y = path.poses[i].pose.position.y;
            point.z = path.poses[i].pose.position.z;
            marker.points.push_back(point);
        }

        // 发布可视化消息
        ros::NodeHandle nh;
        ros::Publisher marker_pub = nh.advertise<visualization_msgs::Marker>("path_marker", 10);
        marker_pub.publish(marker);
    } else {
        ROS_WARN("Cannot find a valid path");
    }
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "path_planner");
    ros::NodeHandle nh;

    // 订阅地图数据和起始/结束位姿，并设置路径发布者
    ros::Subscriber map_sub = nh.subscribe<nav_msgs::OccupancyGrid>("map", 1, map_callback);
    ros::Subscriber start_sub = nh.subscribe<geometry_msgs::PoseStamped>("start_pose", 1, start_callback);
    ros::Subscriber end_sub = nh.subscribe<geometry_msgs::PoseStamped>("end_pose", 1, end_callback);
    path_pub = nh.advertise<nav_msgs::Path>("path", 1);

    // 开始循环处理 ROS 消息
    ros::spin();
    return 0;
}
